// function binary_search_recursive
// this function performs a binary search on a sorted array using recursion
// parameters:
// arr: the sorted array in which the search is performed
// low: the starting index of the search range
// high: the ending index of the search range
// target: the value to search for
// returns: the index of the target element if found, or -1 if not found
def binary_search_recursive(arr, low, high, target) {
    if high >= low {
        // calculate the middle index
        mid = low + (high - low) / 2;
        // check if the middle element is the target
        if arr[mid] == target {
            return mid;
        }
        // if target is smaller than mid, it can only be present in the left subarray
        if arr[mid] > target {
            return binary_search_recursive(arr, low, mid - 1, target);
        }
        // otherwise the element can only be present in the right subarray
        return binary_search_recursive(arr, mid + 1, high, target);
    }
    // target is not present in the array
    return -1;
}

arr = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21];
target = 13;
index_recursive := binary_search_recursive(arr, 0, length(arr) - 1, target);
print(index_recursive);