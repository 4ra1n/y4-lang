def make_array(rows, cols) {
    arr = [];
    for i=0; i<rows; i=i+1 {
        row = [];
        for j=0; j<cols; j=j+1 {
            row = append(row, false);
        }
        arr = append(arr, row);
    }
    return arr;
}

def is_safe(board, row, col) {
    for i=0; i<col; i=i+1 {
        if board[row][i] {
            return false;
        }
    }
    i = row;
    j = col;
    while i >= 0 {
        if j >= 0 {
            if board[i][j] {
                return false;
            }
        } else {
            break;
        }
        i = i - 1;
        j = j - 1;
    }
    i = row;
    j = col;
    while i < 8 {
        if j >= 0 {
            if board[i][j] {
                return false;
            }
        } else {
            break;
        }
        i = i + 1;
        j = j - 1;
    }
    return true;
}

def solve_n_queens_util(board, col) {
    if col >= 8 {
        return true;
    }
    for i=0; i<8; i=i+1 {
        if is_safe(board, i, col) {
            board[i][col] = true;
            if solve_n_queens_util(board, col + 1) {
                return true;
            }
            board[i][col] = false;
        }
    }
    return false;
}

def solve_n_queens() {
    board = make_array(8, 8);
    if solve_n_queens_util(board, 0) {
        return board;
    } else {
        return "no solution";
    }
}

solution = solve_n_queens();
print("N-Queens Solution: ");
print(solution);
