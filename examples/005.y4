函数 最大(a, b) {
    如果 a > b {
        返回 a;
    } 另外 {
        返回 b;
    }
}

函数 创造数组(行, 列) {
    数组 = [];
    循环 甲=0; 甲<行; 甲=甲+1 {
        数组 = 追加(数组,[]);
        循环 乙=0; 乙<列; 乙=乙+1 {
            数组[甲] = 追加(数组[甲], 0);
        }
    }
    返回 数组;
}

函数 最长公共子串(数组1, 数组2) {
    一维长度 = 长度(数组1);
    二维长度 = 长度(数组2);
    矩阵 = 创造数组(一维长度+1, 二维长度+1);
    循环 甲=0; 甲<=一维长度; 甲=甲+1 {
        矩阵[甲][0] = 0;
    }
    循环 乙=0; 乙<=二维长度; 乙=乙+1 {
        矩阵[0][乙] = 0;
    }
    循环 甲=1; 甲<=一维长度; 甲=甲+1 {
        循环 乙=1; 乙<=二维长度; 乙=乙+1 {
            如果 数组1[甲-1] == 数组2[乙-1] {
                矩阵[甲][乙] = 矩阵[甲-1][乙-1] + 1;
            } 另外 {
                矩阵[甲][乙] = 最大(矩阵[甲-1][乙], 矩阵[甲][乙-1]);
            }
        }
    }
    返回 矩阵[一维长度][二维长度];
}

数组1 = [1, 2, 3, 4, 5, 5, 5, 5];
数组2 = [2, 4, 5, 8, 10, 5, 6];
结果长度 = 最长公共子串(数组1, 数组2);
打印("最长公共子串长度: " + 结果长度);
