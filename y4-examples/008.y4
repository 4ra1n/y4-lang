函数 创造数组(行, 列) {
    数组 = [];
    循环 甲=0; 甲<行; 甲=甲+1 {
        临时行 = [];
        循环 乙=0; 乙<列; 乙=乙+1 {
            临时行 = 追加(临时行, 假的);
        }
        数组 = 追加(数组, 临时行);
    }
    返回 数组;
}

函数 是否安全(棋盘, 行, 列) {
    循环 甲=0; 甲<列; 甲=甲+1 {
        如果 棋盘[行][甲] {
            返回 假的;
        }
    }
    甲 = 行;
    乙 = 列;
    当 甲 >= 0 {
        如果 乙 >= 0 {
            如果 棋盘[甲][乙] {
                返回 假的;
            }
        } 另外 {
            跳出;
        }
        甲 = 甲 - 1;
        乙 = 乙 - 1;
    }
    甲 = 行;
    乙 = 列;
    当 甲 < 8 {
        如果 乙 >= 0 {
            如果 棋盘[甲][乙] {
                返回 假的;
            }
        } 另外 {
            跳出;
        }
        甲 = 甲 + 1;
        乙 = 乙 - 1;
    }
    返回 真的;
}

函数 解决N皇后问题工具函数(棋盘, 列) {
    如果 列 >= 8 {
        返回 真的;
    }
    循环 甲=0; 甲<8; 甲=甲+1 {
        如果 是否安全(棋盘, 甲, 列) {
            棋盘[甲][列] = 真的;
            如果 解决N皇后问题工具函数(棋盘, 列 + 1) {
                返回 真的;
            }
            棋盘[甲][列] = 假的;
        }
    }
    返回 假的;
}

函数 解决N皇后问题() {
    棋盘 = 创造数组(8, 8);
    如果 解决N皇后问题工具函数(棋盘, 0) {
        返回 棋盘;
    } 另外 {
        返回 "没有解决";
    }
}

解决 = 解决N皇后问题();
打印("N-Queens 解决: ");
打印(解决);
